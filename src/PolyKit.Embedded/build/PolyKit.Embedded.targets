<Project>

  <ItemGroup>
    <Compile Include="$(MSBuildThisFileDirectory)Polyfills\*.cs"
             Visible="false" />
  </ItemGroup>

  <!--
    Check for the necessary prerequisites to use PolyKit.Embedded.
  -->
  <Target Name="_PolyKit_CheckPrerequisites">

    <!-- Check that this is a C# project, since we are going to feed C# source files to the compiler. -->
    <Error Condition="'$(Language)' != 'C#'"
           Code="POLYKIT0001"
           Text="PolyKit.Embedded can only be used in C# projects."
           File="$(MSBuildProjectFullPath)" />

    <!-- Check that at least C# version 10.0 is used to compile polyfills. -->
    <PropertyGroup>
      <_PolyKit_LangVersionSupported>false</_PolyKit_LangVersionSupported>
      <_PolyKit_LangVersionSupported Condition="'$(LangVersion)' == 'preview'">true</_PolyKit_LangVersionSupported>
      <_PolyKit_LangVersionSupported Condition="'$(LangVersion)' == 'latest'">true</_PolyKit_LangVersionSupported>
      <_PolyKit_LangVersionSupported Condition="'$(LangVersion)' == 'latestMajor'">true</_PolyKit_LangVersionSupported>
    </PropertyGroup>
    <PropertyGroup Condition="'$(_PolyKit_LangVersionSupported)' != 'true'">
      <_PolyKit_LangVersionRegex><![CDATA[^\d{1,2}(\.\d{1,2})?$]]></_PolyKit_LangVersionRegex>
      <_PolyKit_LangVersionSupported Condition="$([System.Text.RegularExpressions.Regex]::IsMatch($(LangVersion), $(_PolyKit_LangVersionRegex))) And $([MSBuild]::VersionGreaterThanOrEquals('$(LangVersion)', '10.0'))">true</_PolyKit_LangVersionSupported>
      <_PolyKit_LangVersionRegex />
    </PropertyGroup>
    <Error Condition="!$(_PolyKit_LangVersionSupported)"
           Code="POLYKIT0002"
           Text="Language version '$(LangVersion)' is not suitable to compile polyfills. Set LangVersion to 'latest', 'latestMajor', 'preview', or at least 10.0 in your project file."
           File="$(MSBuildProjectFullPath)" />

    <!-- Check for a supported version of .NET SDK (6.0 or later) -->
    <PropertyGroup>
      <_PolyKit_NetSdkSupported>false</_PolyKit_NetSdkSupported>
      <_PolyKit_NetSdkSupported Condition="$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '6.0'))">true</_PolyKit_NetSdkSupported>
    </PropertyGroup>
    <Error Condition="!$(_PolyKit_NetSdkSupported)"
           Code="POLYKIT0003"
           Text="PolyKit.Embedded requires .NET SDK 6.0 or a later version."
           File="$(MSBuildProjectFullPath)" />

    <!--
      Obtain a target framework version without the initial 'v'.
      .NET SDK defines a _TargetFrameworkVersionWithoutV property,
      but the initial underscore suggests that it is an internal implementation detail
      and could be pulled from under our feet at any time.
    -->
    <PropertyGroup>
      <_PolyKit_TargetFrameworkVersion>$(TargetFrameworkVersion.TrimStart('vV'))</_PolyKit_TargetFrameworkVersion>
    </PropertyGroup>

    <!-- Check for a supported target framework -->
    <PropertyGroup>
      <_PolyKit_TargetFrameworkSupported>false</_PolyKit_TargetFrameworkSupported>
      <_PolyKit_TargetFrameworkSupported Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' And $([MSBuild]::VersionGreaterThanOrEquals('$(_PolyKit_TargetFrameworkVersion)', '6.0'))">true</_PolyKit_TargetFrameworkSupported>
      <_PolyKit_TargetFrameworkSupported Condition="'$(TargetFrameworkIdentifier)' == '.NETStandard' And $([MSBuild]::VersionGreaterThanOrEquals('$(_PolyKit_TargetFrameworkVersion)', '2.0'))">true</_PolyKit_TargetFrameworkSupported>
      <_PolyKit_TargetFrameworkSupported Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' And $([MSBuild]::VersionGreaterThanOrEquals('$(_PolyKit_TargetFrameworkVersion)', '4.6.2'))">true</_PolyKit_TargetFrameworkSupported>
    </PropertyGroup>
    <Error Condition="!$(_PolyKit_TargetFrameworkSupported)"
           Code="POLYKIT0004"
           Text="PolyKit.Embedded is not compatible with $(TargetFramework). Compatible target frameworks include net462, netstandard2.0, net6.0, and later versions."
           File="$(MSBuildProjectFullPath)" />

  </Target>

  <!--
    Configure PolyKit features according to TFM and/or referenced packages.
    This must be done after the SDK has generated implicit define constants,
    to avoid duplicating some (very error-prone) work.
  -->
  <Target Name="_PolyKit_Configure"
          DependsOnTargets="_PolyKit_CheckPrerequisites;AddImplicitDefineConstants"
          BeforeTargets="CoreCompile"
          Condition="'$(TargetFramework)' != ''">

    <!--
      Set PolyKit_MessageImportance to "low" or "high" to change the verbosity level of messages from PolyKit.
      The default value is "normal".

      Set PolyKit_Silent to true to suppress all messages from PolyKit (including warnings) during build.
    -->
    <PropertyGroup>
      <PolyKit_Silent Condition="'$(PolyKit_Silent)' != 'true'">false</PolyKit_Silent>
      <PolyKit_MessageImportance Condition="'$(PolyKit_MessageImportance)' != 'high' And '$(PolyKit_MessageImportance)' != 'low'">normal</PolyKit_MessageImportance>
    </PropertyGroup>

    <!--
      Set PolyKit_GeneratePublicTypes to true if compiling a polyfill library.
      The default value is false, meaning that all polyfill types will have internal access.
    -->
    <PropertyGroup>
      <PolyKit_GeneratePublicTypes Condition="'$(PolyKit_GeneratePublicTypes)' != 'true'">false</PolyKit_GeneratePublicTypes>
      <DefineConstants Condition="$(PolyKit_GeneratePublicTypes)">$(DefineConstants);POLYKIT_PUBLIC</DefineConstants>
    </PropertyGroup>
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And $(PolyKit_GeneratePublicTypes)"
             Text="Polyfill types will be generated with public access for target '$(TargetFramework)'." />
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And !$(PolyKit_GeneratePublicTypes)"
             Text="Polyfill types will be generated with internal access for target '$(TargetFramework)'." />

    <!--
      Anything that depends on HashCode requires either implicit support from the target framework, or a reference to the Microsoft.Bcl.HashCode package.
      Set PolyKit_UseHashCode to true in the project file if the HashCode type is provided by some other package.
      Set PolyKit_UseHashCode to false in the project file to exclude from compilation polyfills that require the HashCode type.
      In all other cases, just leave PolyKit_UseHashCode alone; just add a reference to the Microsoft.Bcl.HashCode package, if necessary,
      to enable polyfills requiring HashCode.
    -->
    <PropertyGroup Condition="'$(PolyKit_UseHashCode)' == ''">
      <PolyKit_UseHashCode Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETCOREAPP3_0_OR_GREATER'">true</PolyKit_UseHashCode>
      <PolyKit_UseHashCode Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETSTANDARD2_1_OR_GREATER'">true</PolyKit_UseHashCode>
      <PolyKit_UseHashCode Condition="'%(PackageReference.Identity)' == 'Microsoft.Bcl.HashCode'">true</PolyKit_UseHashCode>
    </PropertyGroup>
    <PropertyGroup>
      <PolyKit_UseHashCode Condition="'$(PolyKit_UseHashCode)' != 'true'">false</PolyKit_UseHashCode>
      <DefineConstants Condition="$(PolyKit_UseHashCode)">$(DefineConstants);POLYKIT_USE_HASHCODE</DefineConstants>
    </PropertyGroup>
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And $(PolyKit_UseHashCode)"
             Text="Polyfills requiring System.HashCode will be generated for target '$(TargetFramework)'." />
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And !$(PolyKit_UseHashCode)"
             Text="Polyfills requiring System.HashCode will NOT be generated for target '$(TargetFramework)'." />

    <!--
      Anything that depends on Span requires either implicit support from the target framework, or a reference to the System.Memory package.
      Set PolyKit_UseSpan to true in the project file if the Span type is provided by some other package.
      Set PolyKit_UseSpan to false in the project file to exclude from compilation polyfills that require the Span type.
      In all other cases, just leave PolyKit_UseSpan alone; just add a reference to the System.Memory package, if necessary,
      to enable polyfills requiring Span.
    -->
    <PropertyGroup Condition="'$(PolyKit_UseSpan)' == ''">
      <PolyKit_UseSpan Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETCOREAPP2_1_OR_GREATER'">true</PolyKit_UseSpan>
      <PolyKit_UseSpan Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETSTANDARD2_1_OR_GREATER'">true</PolyKit_UseSpan>
      <PolyKit_UseSpan Condition="'%(PackageReference.Identity)' == 'System.Memory'">true</PolyKit_UseSpan>
    </PropertyGroup>
    <PropertyGroup>
      <PolyKit_UseSpan Condition="'$(PolyKit_UseSpan)' != 'true'">false</PolyKit_UseSpan>
      <DefineConstants Condition="$(PolyKit_UseSpan)">$(DefineConstants);POLYKIT_USE_SPAN</DefineConstants>
    </PropertyGroup>
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And $(PolyKit_UseSpan)"
             Text="Polyfills requiring System.Span will be generated for target '$(TargetFramework)'." />
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And !$(PolyKit_UseSpan)"
             Text="Polyfills requiring System.Span will NOT be generated for target '$(TargetFramework)'." />

    <!--
      Anything that depends on ValueTuple requires either implicit support from the target framework, or a reference to the System.ValueTuple package.
      Set PolyKit_UseValueTuple to true in the project file if the ValueTuple type is provided by some other package.
      Set PolyKit_UseValueTuple to false in the project file to exclude from compilation polyfills that require the ValueTuple type.
      In all other cases, just leave PolyKit_UseValueTuple alone; just add a reference to the System.ValueTuple package, if necessary,
      to enable polyfills requiring ValueTuple.
    -->
    <PropertyGroup Condition="'$(PolyKit_UseValueTuple)' == ''">
      <PolyKit_UseValueTuple Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETCOREAPP1_0_OR_GREATER'">true</PolyKit_UseValueTuple>
      <PolyKit_UseValueTuple Condition="'%(_ImplicitDefineConstant.Identity)' == 'NETSTANDARD2_0_OR_GREATER'">true</PolyKit_UseValueTuple>
      <PolyKit_UseValueTuple Condition="'%(_ImplicitDefineConstant.Identity)' == 'NET47_OR_GREATER'">true</PolyKit_UseValueTuple>
      <PolyKit_UseValueTuple Condition="'%(PackageReference.Identity)' == 'System.ValueTuple'">true</PolyKit_UseValueTuple>
    </PropertyGroup>
    <PropertyGroup>
      <PolyKit_UseValueTuple Condition="'$(PolyKit_UseValueTuple)' != 'true'">false</PolyKit_UseValueTuple>
      <DefineConstants Condition="$(PolyKit_UseValueTuple)">$(DefineConstants);POLYKIT_USE_VALUETUPLE</DefineConstants>
    </PropertyGroup>
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And $(PolyKit_UseValueTuple)"
             Text="Polyfills requiring System.ValueTuple will be generated for target '$(TargetFramework)'." />
    <Message Importance="$(PolyKit_MessageImportance)"
             Condition="!$(PolyKit_Silent) And !$(PolyKit_UseValueTuple)"
             Text="Polyfills requiring System.ValueTuple will NOT be generated for target '$(TargetFramework)'." />

    <!--
      Add #define constants to avoid polyfilling features from .NET versions that the .NET SDK in use cannot target.
      There is no sense, for example, in polyfilling UnscopedRefAttribute when compiling with a .NET SDK prior to 7.0:
      worse yet, it would give the false impression that it is actually supported.
    -->
    <PropertyGroup>
      <DefineConstants Condition="$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '7.0'))">$(DefineConstants);POLYKIT_NETSDK7_0_OR_GREATER</DefineConstants>
      <DefineConstants Condition="$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '8.0'))">$(DefineConstants);POLYKIT_NETSDK8_0_OR_GREATER</DefineConstants>
    </PropertyGroup>

  </Target>

</Project>
